import psycopg2
import time
import streamlit as st
import pandas as pd
import plotly.graph_objects as go


def stat_des_page():
    """
    Renders the Descriptive Statistics page
    """
    st.markdown("# Page de statistiques descriptives")

    st.write("Tableau de donn√©es")
    st.write(
        "Colonnes : IP Source, Port, Type de flux (rejet√©/autoris√©), Date et heure, etc."
    )
    st.write("Statistiques d√©taill√©es")
    st.write("Nombre d'occurrences pour chaque IP source contact√©e.")
    st.write("R√©partition des flux rejet√©s et autoris√©s par IP source.")
    st.write("Graphiques d√©taill√©s")
    st.write("Histogramme des occurrences des IP sources.")
    st.write("Graphique en secteurs des types de flux par IP source.")
    st.write("Filtres avanc√©s")
    st.write("Permet de filtrer les donn√©es par plages de dates, types de flux, etc.")

    # Se connecter √† la base de donn√©es SQLite
    MAX_RETRIES = 10  # Nombre maximum de tentatives
    WAIT_SECONDS = 2  # Temps d'attente entre chaque tentative

    for i in range(MAX_RETRIES):
        try:
            conn = psycopg2.connect(
                host="postgres",
                database="challenge_secu",
                user="admin",
                password="admin",
                port=5432,
            )
            print("Connexion r√©ussie √† PostgreSQL !")
            break  # Sort de la boucle d√®s que la connexion est √©tablie
        except psycopg2.OperationalError:
            st.write(
                f"üîÑ Tentative {i+1}/{MAX_RETRIES} : PostgreSQL n'est pas encore pr√™t..."
            )
            time.sleep(WAIT_SECONDS)
    else:
        st.write("Impossible de se connecter √† PostgreSQL apr√®s plusieurs tentatives.")
        exit(1)

    query = "SELECT * FROM logs ORDER BY RANDOM() LIMIT 100000;"
    # on √©chantillonne pour des raisons de performance
    df = pd.read_sql_query(query, conn)
    conn.close()

    # Cr√©er un piechart pour 'proto'
    proto_counts = df["proto"].value_counts()
    fig_proto = go.Figure(
        data=[go.Pie(labels=proto_counts.index, values=proto_counts.values)],
        layout=go.Layout(title="R√©partition des protocoles", width=600, height=400),
    )

    # Cr√©er un graphique en secteurs pour 'action'
    action_counts = df["action"].value_counts()
    fig_action = go.Figure(
        data=[go.Pie(labels=action_counts.index, values=action_counts.values)],
        layout=go.Layout(title="R√©partition des actions", width=600, height=400),
    )

    # Afficher les graphiques dans Streamlit c√¥te √† c√¥te
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_proto)
    with col2:
        st.plotly_chart(fig_action)
